################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

from __future__ import print_function
import os, sys
from ctypes import *
from ctypes.util import find_library

# nmaya
lib = None
# check to see if the shared object was embedded locally, attempt to load it
# if not, try to load it using the default system paths...
# we need to use os.chdir instead of trying to modify $LD_LIBRARY_PATH and reloading the interpreter
t = os.getcwd()
p = os.path.join(os.path.dirname(__file__), '..')  # find the path to our $project_ctypes.py
os.chdir(p)  # change directories briefly

try:
    from nmaya import libnmaya                      # attempt to import the shared lib if it exists
    lib = CDLL(libnmaya.__file__)            # if it exists try to load the shared lib
except ImportError:
    pass
finally:
    os.chdir(t)  # switch back to orig dir

if not lib:
    try:
        # If LD_LIBRARY_PATH or your OSs equivalent is set, this is the only way to
        # load the library.  If we use find_library below, we get the wrong result.
        if os.name == 'posix':
            if sys.platform == 'darwin':
                lib = cdll.LoadLibrary('libnmaya.0.dylib')
            else:
                lib = cdll.LoadLibrary("libnmaya.so.0")
        elif os.name == 'nt':
            lib = cdll.LoadLibrary('libnmaya.dll')
    except OSError:
        libpath = find_library("nmaya")
        if not libpath:
            raise ImportError("Unable to find libnmaya")
        lib = cdll.LoadLibrary(libpath)

class nmaya_t(Structure):
    pass # Empty - only for type checking
nmaya_p = POINTER(nmaya_t)

class nmaya_arrangement_t(Structure):
    pass # Empty - only for type checking
nmaya_arrangement_p = POINTER(nmaya_arrangement_t)


# nmaya
lib.nmaya_new.restype = nmaya_p
lib.nmaya_new.argtypes = [c_char_p]
lib.nmaya_destroy.restype = None
lib.nmaya_destroy.argtypes = [POINTER(nmaya_p)]
lib.nmaya_start.restype = c_int
lib.nmaya_start.argtypes = [nmaya_p]
lib.nmaya_pluck.restype = nmaya_arrangement_p
lib.nmaya_pluck.argtypes = [nmaya_p, c_char_p, c_int]
lib.nmaya_version.restype = None
lib.nmaya_version.argtypes = [POINTER(c_int), POINTER(c_int), POINTER(c_int)]
lib.nmaya_test.restype = None
lib.nmaya_test.argtypes = [c_bool]

class Nmaya(object):
    """
    A library for arranging stuff
    """

    allow_destruct = False
    def __init__(self, *args):
        """
        Constructor, creates a new Nmaya node.
        """
        if len(args) == 2 and type(args[0]) is c_void_p and isinstance(args[1], bool):
            self._as_parameter_ = cast(args[0], nmaya_p) # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        elif len(args) == 2 and type(args[0]) is nmaya_p and isinstance(args[1], bool):
            self._as_parameter_ = args[0] # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        else:
            assert(len(args) == 1)
            self._as_parameter_ = lib.nmaya_new(args[0]) # Creation of new raw type
            self.allow_destruct = True

    def __del__(self):
        """
        Destructor, destroys a Nmaya node.
        """
        if self.allow_destruct:
            lib.nmaya_destroy(byref(self._as_parameter_))

    def __eq__(self, other):
        if type(other) == type(self):
            return other.c_address() == self.c_address()
        elif type(other) == c_void_p:
            return other.value == self.c_address()

    def c_address(self):
        """
        Return the address of the object pointer in c.  Useful for comparison.
        """
        return addressof(self._as_parameter_.contents)

    def __bool__(self):
        "Determine whether the object is valid by converting to boolean" # Python 3
        return self._as_parameter_.__bool__()

    def __nonzero__(self):
        "Determine whether the object is valid by converting to boolean" # Python 2
        return self._as_parameter_.__nonzero__()

    def start(self):
        """
        Start node.
Returns 0 if OK, -1 if it wasn't possible to start the node.
        """
        return lib.nmaya_start(self._as_parameter_)

    def pluck(self, arrangement_key, position):
        """
        Return specic item from specified arrangement
        """
        return NmayaArrangement(lib.nmaya_pluck(self._as_parameter_, arrangement_key, position), True)

    @staticmethod
    def version(major, minor, patch):
        """
        Return the Nmaya version for run-time API detection
        """
        return lib.nmaya_version(byref(c_int.from_param(major)), byref(c_int.from_param(minor)), byref(c_int.from_param(patch)))

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        return lib.nmaya_test(verbose)


# nmaya_arrangement
lib.nmaya_arrangement_new.restype = nmaya_arrangement_p
lib.nmaya_arrangement_new.argtypes = []
lib.nmaya_arrangement_destroy.restype = None
lib.nmaya_arrangement_destroy.argtypes = [POINTER(nmaya_arrangement_p)]
lib.nmaya_arrangement_test.restype = None
lib.nmaya_arrangement_test.argtypes = [c_bool]

class NmayaArrangement(object):
    """
    A library for arranging stuff
    """

    allow_destruct = False
    def __init__(self, *args):
        """
        Create a new arrangement
        """
        if len(args) == 2 and type(args[0]) is c_void_p and isinstance(args[1], bool):
            self._as_parameter_ = cast(args[0], nmaya_arrangement_p) # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        elif len(args) == 2 and type(args[0]) is nmaya_arrangement_p and isinstance(args[1], bool):
            self._as_parameter_ = args[0] # Conversion from raw type to binding
            self.allow_destruct = args[1] # This is a 'fresh' value, owned by us
        else:
            assert(len(args) == 0)
            self._as_parameter_ = lib.nmaya_arrangement_new() # Creation of new raw type
            self.allow_destruct = True

    def __del__(self):
        """
        Destroy the arrangement
        """
        if self.allow_destruct:
            lib.nmaya_arrangement_destroy(byref(self._as_parameter_))

    def __eq__(self, other):
        if type(other) == type(self):
            return other.c_address() == self.c_address()
        elif type(other) == c_void_p:
            return other.value == self.c_address()

    def c_address(self):
        """
        Return the address of the object pointer in c.  Useful for comparison.
        """
        return addressof(self._as_parameter_.contents)

    def __bool__(self):
        "Determine whether the object is valid by converting to boolean" # Python 3
        return self._as_parameter_.__bool__()

    def __nonzero__(self):
        "Determine whether the object is valid by converting to boolean" # Python 2
        return self._as_parameter_.__nonzero__()

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        return lib.nmaya_arrangement_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
