/*  =========================================================================
    nmaya_arrangement - A library for arranging stuff

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of zbroker, the ZeroMQ broker project.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef NMAYA_ARRANGEMENT_H_INCLUDED
#define NMAYA_ARRANGEMENT_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/nmaya_arrangement.api" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef NMAYA_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new arrangement
NMAYA_EXPORT nmaya_arrangement_t *
    nmaya_arrangement_new (const char *mime_type, zchunk_t *content);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the arrangement
NMAYA_EXPORT void
    nmaya_arrangement_destroy (nmaya_arrangement_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Return mime_type
NMAYA_EXPORT const char *
    nmaya_arrangement_mime_type (nmaya_arrangement_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Returns the content, and pass ownership to the
//  caller. The caller must destroy the content when finished with it.
//  Caller owns return value and must destroy it when done.
NMAYA_EXPORT zchunk_t *
    nmaya_arrangement_content (nmaya_arrangement_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
NMAYA_EXPORT void
    nmaya_arrangement_test (bool verbose);

#endif // NMAYA_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
